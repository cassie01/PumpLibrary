# import unittest
from TestCase import *


class TestClinicScenarioPart2(unittest.TestCase):

    def test_clinic_scenario_part2(self):

        keep_running = True

        # 接通输液泵的电源并打开泵。
        # 泵处于停止状态。
        log.logger.info("This test is started!")
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s!" % system_status)
        assert system_status == SystemStatus.EStopStatus
        # 设置为基本模式。
        # 设置成功。
        lvp.set_infusion_mode('basic')
        infusion_mode = lvp.get_infusion_mode()
        log.logger.info("The current infusion mode is %s!" % infusion_mode)
        assert infusion_mode == 'basic'
        # 手动排出管路中的空气。
        # 执行排气操作，当排气量达到6.00mL时，排气完成。
        lvp.start_bolus()
        lvp.start_prime()
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s before priming!" % system_status)
        assert system_status == SystemStatus.ERunStatus
        time.sleep(6 / 1200 * 3600)
        lvp.stop_prime()
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after priming!" % system_status)
        assert system_status == SystemStatus.EStopStatus
        # 打开药物库。
        # 设置成功。
        lvp.set_drug_library_switch_status('On')
        drug_library_switch = lvp.get_drug_library_switch_status()
        assert drug_library_switch == 'On'
        #  选择药物为红霉素。
        #  设置成功。
        # lvp.set_current_drug() # 泵端未实现
        # lvp.get_current_drug() # 泵端未实现
        #  调整速度为30mL/h，输液量为30mL。
        #  设置成功。
        lvp.set_infusion_parameter(30, 0, 30)
        # 按开始键开始输注。
        # 泵处于运行状态。
        lvp.start_infusion()
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after starting infusion!" % system_status)
        assert system_status == SystemStatus.ERunStatus
        alarm_handler_time1 = 0
        mark_time = datetime.datetime.now()
        while keep_running:
            duration_time = (datetime.datetime.now() - mark_time).seconds
            if duration_time - alarm_handler_time1 < 30 / 30 * 3600:
                log.logger.info("The remain time is %s!" % (30 / 30 * 3600 - duration_time))
                alarm_mark_time1 = datetime.datetime.now()
                alarm_id = lvp.get_pump_alarm()
                if type(alarm_id) == list():
                    pass
                else:
                    continue
                if 22 in alarm_id:
                    log.logger.info("The occurred alarm is %s!" % alarm_matrix()[22])
                    lvp.stop_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    lvp.start_bolus()
                    lvp.start_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s before priming!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    time.sleep(6 / 1200 * 3600)
                    lvp.stop_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after priming!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    alarm_id.clear()
                    lvp.start_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after starting infusion!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    alarm_handler_time1 = (datetime.datetime.now() - alarm_mark_time1).seconds
            else:
                log.logger.info("Completing infusion!")
                break
        # 输注完成。
        # 屏幕出现输注完成警报。
        alarm_id = lvp.get_pump_alarm()
        log.logger.info("The occurred alarm is %s!" % alarm_matrix()[alarm_id[0]])
        assert 23 in alarm_id
        alarm_id.clear()
        # 按停止键。
        # 警报消除成功，泵处于停止状态。
        lvp.stop_infusion()
        alarm_id = lvp.get_pump_alarm()
        assert 23 not in alarm_id
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after completing infusion!" % system_status)
        assert system_status == SystemStatus.EStopStatus
        # 更换药物。
        # 设置成功。
        # lvp.set_current_drug() # 泵端未实现
        # lvp.get_current_drug() # 泵端未实现
        # 将速率降低到25mL/ h，输液量为30mL。
        # 设置成功。
        lvp.set_infusion_parameter(25, 0, 30)
        # 按开始键开始输注。
        # 泵处于运行状态。
        lvp.start_infusion()
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after starting infusion!" % system_status)
        assert system_status == SystemStatus.ERunStatus
        alarm_handler_time2 = 0
        mark_time = datetime.datetime.now()
        while keep_running:
            duration_time = (datetime.datetime.now() - mark_time).seconds
            if duration_time - alarm_handler_time2 < 30 / 25 * 3600:
                log.logger.info("The remain time is %s!" % (30 / 25 * 3600 - duration_time))
                alarm_mark_time2 = datetime.datetime.now()
                alarm_id = lvp.get_pump_alarm()
                if type(alarm_id) == list():
                    pass
                else:
                    continue
                if 22 in alarm_id:
                    log.logger.info("The occurred alarm is %s!" % alarm_matrix()[22])
                    lvp.stop_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    lvp.start_bolus()
                    lvp.start_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s before priming!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    time.sleep(6 / 1200 * 3600)
                    lvp.stop_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after priming!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    alarm_id.clear()
                    lvp.start_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after starting infusion!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    alarm_handler_time2 = (datetime.datetime.now() - alarm_mark_time2).seconds
            else:
                log.logger.info("Completing infusion!")
                break
        # 输注完成。
        # 屏幕出现输注完成警报。
        alarm_id = lvp.get_pump_alarm()
        log.logger.info("The occurred alarm is %s!" % alarm_matrix()[alarm_id[0]])
        assert 23 in alarm_id
        alarm_id.clear()
        # 按停止键。
        # 警报消除成功，泵处于停止状态。
        lvp.stop_infusion()
        alarm_id = lvp.get_pump_alarm()
        assert 23 not in alarm_id
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after completing infusion!" % system_status)
        assert system_status == SystemStatus.EStopStatus
        # 在5:00 pm，改变药物为红霉素。
        # 设置成功。
        # lvp.set_current_drug() # 泵端未实现
        # lvp.get_current_drug() # 泵端未实现
        # 调整速率为30mL/ h。
        # 设置成功。
        lvp.set_infusion_parameter(30, 0, 30)
        # 按开始键开始输注。
        # 泵处于运行状态。
        lvp.start_infusion()
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after starting infusion!" % system_status)
        assert system_status == SystemStatus.ERunStatus
        alarm_handler_time3 = 0
        mark_time = datetime.datetime.now()
        while keep_running:
            duration_time = (datetime.datetime.now() - mark_time).seconds
            if duration_time - alarm_handler_time3 < 30 / 30 * 3600:
                log.logger.info("The remain time is %s!" % (30 / 30 * 3600 - duration_time))
                alarm_mark_time3 = datetime.datetime.now()
                alarm_id = lvp.get_pump_alarm()
                if type(alarm_id) == list():
                    pass
                else:
                    continue
                if 22 in alarm_id:
                    log.logger.info("The occurred alarm is %s!" % alarm_matrix()[22])
                    lvp.stop_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    lvp.start_bolus()
                    lvp.start_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s before priming!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    time.sleep(6 / 1200 * 3600)
                    lvp.stop_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after priming!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    alarm_id.clear()
                    lvp.start_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after starting infusion!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    alarm_handler_time3 = (datetime.datetime.now() - alarm_mark_time3).seconds
            else:
                log.logger.info("Completing infusion!")
                break
        # 输注完成。
        # 屏幕出现输注完成警报。
        alarm_id = lvp.get_pump_alarm()
        log.logger.info("The occurred alarm is %s!" % alarm_matrix()[alarm_id[0]])
        assert 23 in alarm_id
        alarm_id.clear()
        # 按停止键。
        # 警报消除成功，泵处于停止状态。
        lvp.stop_infusion()
        alarm_id = lvp.get_pump_alarm()
        assert 23 not in alarm_id
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after completing infusion!" % system_status)
        assert system_status == SystemStatus.EStopStatus
        # 在6:00 pm，调整药物。
        # 设置成功。
        # lvp.set_current_drug() # 泵端未实现
        # lvp.get_current_drug() # 泵端未实现
        # 调整速率为25mL/ h。
        # 设置成功。
        lvp.set_infusion_parameter(25, 0, 30)
        # 按开始键开始输注。
        # 泵处于运行状态。
        lvp.start_infusion()
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after starting infusion!" % system_status)
        assert system_status == SystemStatus.ERunStatus
        alarm_handler_time4 = 0
        mark_time = datetime.datetime.now()
        while keep_running:
            duration_time = (datetime.datetime.now() - mark_time).seconds
            if duration_time - alarm_handler_time4 < 30 / 25 * 3600:
                log.logger.info("The remain time is %s!" % (30 / 25 * 3600 - duration_time))
                alarm_mark_time4 = datetime.datetime.now()
                alarm_id = lvp.get_pump_alarm()
                if type(alarm_id) == list():
                    pass
                else:
                    continue
                if 22 in alarm_id:
                    log.logger.info("The occurred alarm is %s!" % alarm_matrix()[22])
                    lvp.stop_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    lvp.start_bolus()
                    lvp.start_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s before priming!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    time.sleep(6 / 1200 * 3600)
                    lvp.stop_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after priming!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    alarm_id.clear()
                    lvp.start_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after starting infusion!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    alarm_handler_time4 = (datetime.datetime.now() - alarm_mark_time4).seconds
            else:
                log.logger.info("Completing infusion!")
                break
        # 输注完成。
        # 屏幕出现输注完成警报。
        alarm_id = lvp.get_pump_alarm()
        log.logger.info("The occurred alarm is %s!" % alarm_matrix()[alarm_id[0]])
        assert 23 in alarm_id
        alarm_id.clear()
        # 按停止键。
        # 警报消除成功，泵处于停止状态。
        lvp.stop_infusion()
        alarm_id = lvp.get_pump_alarm()
        assert 23 not in alarm_id
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after completing infusion!" % system_status)
        assert system_status == SystemStatus.EStopStatus
        # 调整药物。
        # 设置成功。
        # lvp.set_current_drug() # 泵端未实现
        # lvp.get_current_drug() # 泵端未实现
        # 调整速率为30mlL/ h。
        # 设置成功。
        lvp.set_infusion_parameter(30, 0, 30)
        # 打开夜间模式。
        # 设置成功。
        # if time.localtime()[3] >= 19 and time.localtime()[4] >= 0:
        lvp.set_night_mode_switch_status("On")
        assert lvp.get_night_mode_switch_status() == "On"
        # 设置夜间模式时间段为19：00至6：00	。
        # 设置成功。
        lvp.set_night_mode_period(19, 0, 6, 0)
        assert lvp.get_night_mode_period() == (19, 0, 6, 0)
        # 将阻塞水平提高到4级。
        # 设置成功。
        lvp.set_occlusion_level(4)
        assert lvp.get_occlusion_level() == 4
        # 静音按键音。
        # 设置成功。
        lvp.set_touch_tone_switch_status("Off")
        assert lvp.get_touch_tone_switch_status() == "Off"
        # 按开始键开始输液。
        # 泵处于运行状态。
        lvp.start_infusion()
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after starting infusion!" % system_status)
        assert system_status == SystemStatus.ERunStatus
        alarm_handler_time5 = 0
        mark_time = datetime.datetime.now()
        while keep_running:
            duration_time = (datetime.datetime.now() - mark_time).seconds
            if duration_time - alarm_handler_time5 < 30 / 30 * 3600:
                log.logger.info("The remain time is %s!" % (30 / 30 * 3600 - duration_time))
                alarm_mark_time5 = datetime.datetime.now()
                alarm_id = lvp.get_pump_alarm()
                if type(alarm_id) == list():
                    pass
                else:
                    continue
                if 22 in alarm_id:
                    log.logger.info("The occurred alarm is %s!" % alarm_matrix()[22])
                    lvp.stop_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    lvp.start_bolus()
                    lvp.start_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s before priming!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    time.sleep(6 / 1200 * 3600)
                    lvp.stop_prime()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after priming!" % system_status)
                    assert system_status == SystemStatus.EStopStatus
                    alarm_id.clear()
                    lvp.start_infusion()
                    system_status = lvp.get_system_status()
                    log.logger.info("The current system status is %s after starting infusion!" % system_status)
                    assert system_status == SystemStatus.ERunStatus
                    alarm_handler_time5 = (datetime.datetime.now() - alarm_mark_time5).seconds
            else:
                log.logger.info("Completing infusion!")
                break
        # 输注完成。
        # 屏幕出现输注完成警报。
        alarm_id = lvp.get_pump_alarm()
        log.logger.info("The occurred alarm is %s!" % alarm_matrix()[alarm_id[0]])
        assert 23 in alarm_id
        alarm_id.clear()
        # 按停止键。
        # 警报消除成功，泵处于停止状态。
        lvp.stop_infusion()
        alarm_id = lvp.get_pump_alarm()
        assert 23 not in alarm_id
        system_status = lvp.get_system_status()
        log.logger.info("The current system status is %s after completing infusion!" % system_status)
        assert system_status == SystemStatus.EStopStatus
